# Create the plot
gg <- ggplot(plot_data, aes_string(x = "TimePoint", y = signal, fill = "Organ")) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes_string(ymin = paste(signal, "-", std), ymax = paste(signal, "+", std)),
width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Spleen" = "hotpink", "Liver" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", linewidth = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
)
# Print the plot
print(gg)
}
# Example usage
plotOrganDataBars(
data_list = list(Pancreas = pancreas, Spleen = spleen, Liver = liver),
title = "Gd K-edge Organ Enhancement",
ylab = "[Gd] (mg/mL)",
y_breaks = seq(0, 2, by = 0.3),  # Adjust y_breaks according to the actual range of your data
type = "Gd"
)
# Adjusted function to load renal data
renalLoad <- function(tag, path = "Kidney_Measurements/", group = "") {
# Construct the pattern to search for files with the specific tag and group
pattern <- paste0(tag, "_", group, "[0-9]+\\.csv$")
# List all files in the directory
all_files <- list.files(path, pattern = pattern, full.names = TRUE)
# Function to read a file and add NA rows if needed
readAndPad <- function(filePath) {
df <- read_csv(filePath)
neededRows <- 5 - nrow(df)
if (neededRows > 0) {
# Create a tibble of NAs with the same number of columns as df
padRows <- as_tibble(matrix(NA, ncol = ncol(df), nrow = neededRows))
colnames(padRows) <- colnames(df)
# Bind the padRows on top of df
df <- bind_rows(padRows, df)
}
return(df)
}
# Load each file and store in a list
data_list <- lapply(all_files, readAndPad)
return(data_list)
}
# Function to calculate stats remains unchanged
vesselStats <- function(data) {
# Prepare data frames to store the final averages and standard deviations
averages_df <- data.frame(matrix(ncol = ncol(data[[1]]), nrow = nrow(data[[1]])))
colnames(averages_df) <- colnames(data[[1]])
std_dev_df <- data.frame(matrix(ncol = ncol(data[[1]]), nrow = nrow(data[[1]])))
colnames(std_dev_df) <- colnames(data[[1]])
# Iterate over each row
for(row in 1:nrow(data[[1]])) {
sums <- vector("numeric", ncol(data[[1]]))
squared_sums <- vector("numeric", ncol(data[[1]]))
counts <- rep(0, ncol(data[[1]]))
# Loop through each data frame in the list
for(df in data) {
# Check if the row exists in the current data frame
if(nrow(df) >= row) {
# Convert the row to numeric
row_values <- as.numeric(df[row, ])
# Identify non-NA indices
non_na_indices <- !is.na(row_values)
# Perform calculations only on non-NA values
sums[non_na_indices] <- sums[non_na_indices] + row_values[non_na_indices]
squared_sums[non_na_indices] <- squared_sums[non_na_indices] + (row_values[non_na_indices])^2
counts[non_na_indices] <- counts[non_na_indices] + 1
}
}
# Calculate the averages and standard deviations
averages <- sums / counts
variances <- (squared_sums - (sums^2 / counts)) / (counts - 1)
std_devs <- sqrt(variances)
# Handle cases where count is zero to avoid division by zero
averages[is.na(averages)] <- NA  # Set NA where division by zero occurred
std_devs[is.na(std_devs)] <- NA
# Store results in the corresponding data frames
averages_df[row, ] <- averages
std_dev_df[row, ] <- std_devs
}
return(list(averages = averages_df, std_devs = std_dev_df))
}
vesselLoad <- function(tag, path = "Vessel_Measurements/", group) {
# Construct the pattern to search for files with the specific tag
pattern <- paste0(tag, "_", group, "[0-9]+\\.csv$")
# List all files in the directory
all_files <- list.files(path, pattern = pattern, full.names = TRUE)
print(all_files)
# Function to read a file and add NA rows if needed
readAndPad <- function(filePath) {
df <- read_csv(filePath)
neededRows <- 5 - nrow(df)
if (neededRows > 0) {
# Create a tibble of NAs with the same number of columns as df
padRows <- as_tibble(matrix(NA, ncol = ncol(df), nrow = neededRows))
colnames(padRows) <- colnames(df)
# Bind the padRows on top of df
df <- bind_rows(padRows, df)
}
return(df)
}
# Load each file and store in a list
data_list <- lapply(all_files, readAndPad)
return(data_list)
}
vesselStats <- function(data) {
# Prepare data frames to store the final averages and standard deviations
averages_df <- data.frame(matrix(ncol = ncol(data[[1]]), nrow = nrow(data[[1]])))
colnames(averages_df) <- colnames(data[[1]])
std_dev_df <- data.frame(matrix(ncol = ncol(data[[1]]), nrow = nrow(data[[1]])))
colnames(std_dev_df) <- colnames(data[[1]])
# Iterate over each row
for(row in 1:nrow(data[[1]])) {
sums <- vector("numeric", ncol(data[[1]]))
squared_sums <- vector("numeric", ncol(data[[1]]))
counts <- rep(0, ncol(data[[1]]))
# Loop through each data frame in the list
for(df in data) {
# Check if the row exists in the current data frame
if(nrow(df) >= row) {
# Convert the row to numeric
row_values <- as.numeric(df[row, ])
# Identify non-NA indices
non_na_indices <- !is.na(row_values)
# Perform calculations only on non-NA values
sums[non_na_indices] <- sums[non_na_indices] + row_values[non_na_indices]
squared_sums[non_na_indices] <- squared_sums[non_na_indices] + (row_values[non_na_indices])^2
counts[non_na_indices] <- counts[non_na_indices] + 1
}
}
# Calculate the averages and standard deviations
averages <- sums / counts
variances <- (squared_sums - (sums^2 / counts)) / (counts - 1)
std_devs <- sqrt(variances)
# Handle cases where count is zero to avoid division by zero
averages[is.na(averages)] <- NA  # Set NA where division by zero occurred
std_devs[is.na(std_devs)] <- NA
# Store results in the corresponding data frames
averages_df[row, ] <- averages
std_dev_df[row, ] <- std_devs
}
return(list(averages = averages_df, std_devs = std_dev_df))
}
# Loading renal data and generating descriptive stats
cortex_data <- renalLoad("r_cortex", group = "s")
medulla_data <- renalLoad("r_medulla", group = "s")
pelvis_data <- renalLoad("r_pelvis", group = "s")
cortex_stats <- vesselStats(cortex_data)
medulla_stats <- vesselStats(medulla_data)
pelvis_stats <- vesselStats(pelvis_data)
# Create lists for averages and standard deviations for spleen and liver
spleen_stats <- list(
averages = data.frame(
t = spleen$t,
Signal_HU = spleen$hu,
Signal_Kedge = spleen$gd
),
std_devs = data.frame(
t = spleen$t,
Signal_HU = spleen$hu_std,
Signal_Kedge = spleen$gd_std
)
)
liver_stats <- list(
averages = data.frame(
t = liver$t,
Signal_HU = liver$hu,
Signal_Kedge = liver$gd
),
std_devs = data.frame(
t = liver$t,
Signal_HU = liver$hu_std,
Signal_Kedge = liver$gd_std
)
)
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10) # Adjust if your time points are different
renal_areas <- c("Cortex", "Medulla", "Pelvis")
renal_areas <- c("AGuIX", "Dotarem")
# Prepare data for plotting
plot_data <- data.frame(TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points)))
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
#geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen", AGuIX = "lightblue", "Dotarem" = "gold", "Spleen" = "hotpink", "Liver" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"), axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"), axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold" )
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black") # Vertical dotted lines
# Print the plot
print(gg)
}
# Example usage:
stats_list <- list(cortex_stats, medulla_stats, pelvis_stats, liver_stats, spleen_stats)
#stats_list <- list(aguix_medulla_stats, dotarem_medulla_stats )
plotRenalDataBars(stats_list, "Gd K-edge Renal Elimination", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
cortex_stats
spleen_stats
stats_list <- list(
renal_stats,  # Assuming this is already prepared
spleen_stats = list(
averages = data.frame(t = spleen_stats$averages$t, Signal_HU = spleen_stats$averages$Signal_HU, Signal_Kedge = spleen_stats$averages$Signal_Kedge),
std_devs = data.frame(t = spleen_stats$std_devs$t, Signal_HU = spleen_stats$std_devs$Signal_HU, Signal_Kedge = spleen_stats$std_devs$Signal_Kedge)
),
liver_stats = list(
averages = data.frame(t = liver_stats$averages$t, Signal_HU = liver_stats$averages$Signal_HU, Signal_Kedge = liver_stats$averages$Signal_Kedge),
std_devs = data.frame(t = liver_stats$std_devs$t, Signal_HU = liver_stats$std_devs$Signal_HU, Signal_Kedge = liver_stats$std_devs$Signal_Kedge)
)
)
stats_list <- list(
cortex_stats, medulla_stats, pelvis_stats,  # Assuming this is already prepared
spleen_stats = list(
averages = data.frame(t = spleen_stats$averages$t, Signal_HU = spleen_stats$averages$Signal_HU, Signal_Kedge = spleen_stats$averages$Signal_Kedge),
std_devs = data.frame(t = spleen_stats$std_devs$t, Signal_HU = spleen_stats$std_devs$Signal_HU, Signal_Kedge = spleen_stats$std_devs$Signal_Kedge)
),
liver_stats = list(
averages = data.frame(t = liver_stats$averages$t, Signal_HU = liver_stats$averages$Signal_HU, Signal_Kedge = liver_stats$averages$Signal_Kedge),
std_devs = data.frame(t = liver_stats$std_devs$t, Signal_HU = liver_stats$std_devs$Signal_HU, Signal_Kedge = liver_stats$std_devs$Signal_Kedge)
)
)
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
spleen_stats_adjusted <- list(
averages = data.frame(
t = spleen_stats$averages$t,
Signal_HU = spleen_stats$averages$Signal_HU,
Signal_Kedge = spleen_stats$averages$Signal_Kedge,
Noise_HU = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(spleen_stats$averages))  # Placeholder if needed
),
std_devs = data.frame(
t = spleen_stats$std_devs$t,
Signal_HU = spleen_stats$std_devs$Signal_HU,
Signal_Kedge = spleen_stats$std_devs$Signal_Kedge,
Noise_HU = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(spleen_stats$std_devs))  # Placeholder if needed
)
)
liver_stats_adjusted <- list(
averages = data.frame(
t = liver_stats$averages$t,
Signal_HU = liver_stats$averages$Signal_HU,
Signal_Kedge = liver_stats$averages$Signal_Kedge,
Noise_HU = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(liver_stats$averages))  # Placeholder if needed
),
std_devs = data.frame(
t = liver_stats$std_devs$t,
Signal_HU = liver_stats$std_devs$Signal_HU,
Signal_Kedge = liver_stats$std_devs$Signal_Kedge,
Noise_HU = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(liver_stats$std_devs))  # Placeholder if needed
)
)
# Example usage:
stats_list <- list(cortex_stats, medulla_stats, pelvis_stats, liver_stats_adjusted, spleen_stats_adjusted)
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10) # Adjust if your time points are different
renal_areas <- c("Cortex", "Medulla", "Pelvis", "Liver", "Spleen")
#renal_areas <- c("AGuIX", "Dotarem")
# Prepare data for plotting
plot_data <- data.frame(TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points)))
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
#geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen", AGuIX = "lightblue", "Dotarem" = "gold", "Spleen" = "hotpink", "Liver" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"), axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"), axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold" )
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black") # Vertical dotted lines
# Print the plot
print(gg)
}
# Example usage:
stats_list <- list(cortex_stats, medulla_stats, pelvis_stats, liver_stats_adjusted, spleen_stats_adjusted)
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10) # Adjust if your time points are different
renal_areas <- c("Cortex", "Medulla", "Pelvis", "Liver", "Spleen")
#renal_areas <- c("AGuIX", "Dotarem")
# Prepare data for plotting
plot_data <- data.frame(TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points)))
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen", AGuIX = "lightblue", "Dotarem" = "gold", "Spleen" = "hotpink", "Liver" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"), axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"), axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold" )
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black") # Vertical dotted lines
# Print the plot
print(gg)
}
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10) # Adjust if your time points are different
renal_areas <- c("Liver", "Spleen", "Cortex", "Medulla", "Pelvis")
#renal_areas <- c("AGuIX", "Dotarem")
# Prepare data for plotting
plot_data <- data.frame(TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points)))
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen", AGuIX = "lightblue", "Dotarem" = "gold", "Spleen" = "hotpink", "Liver" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"), axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"), axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold" )
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black") # Vertical dotted lines
# Print the plot
print(gg)
}
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
# Example usage:
stats_list <- list(liver_stats_adjusted, spleen_stats_adjusted, cortex_stats, medulla_stats, pelvis_stats)
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10) # Adjust if your time points are different
renal_areas <- c("Liver", "Spleen", "Cortex", "Medulla", "Pelvis")
#renal_areas <- c("AGuIX", "Dotarem")
# Prepare data for plotting
plot_data <- data.frame(TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points)))
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c( "Liver" = "gold", "Spleen" = "hotpink", "Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen", AGuIX = "lightblue", "Dotarem" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"), axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"), axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold" )
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black") # Vertical dotted lines
# Print the plot
print(gg)
}
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
library(tidyverse)
library(ggplot2)
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10) )
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10)  # Adjust if your time points are different
renal_areas <- c("Liver", "Spleen", "Cortex", "Medulla", "Pelvis")  # Specified order here
# Prepare data for plotting
plot_data <- data.frame(
TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points))
)
# Set RenalArea as a factor with the specified order
plot_data$RenalArea <- factor(plot_data$RenalArea, levels = renal_areas)
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Liver" = "gold", "Spleen" = "hotpink", "Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color = "black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black")  # Vertical dotted lines
# Print the plot
print(gg)
}
# Ensure your stats_list is correct and includes the ordered data
stats_list <- list(liver_stats_adjusted, spleen_stats_adjusted, cortex_stats, medulla_stats, pelvis_stats)
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))plotRenalDataBars(stats_list, "Medulla Enhancement", "Signal_HU", "Hounsfield Units (HU)", y_breaks = c(50,100, 150, 200, 300, 400 ,500, 600))
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))
