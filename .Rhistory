library(dplyr)
# Given your data setup
time_points <- c(0.11, 0.5, 1, 3, 10)
# Add significance values directly into the data frames
IVC_data <- data.frame(
Time = factor(time_points, levels = time_points),
AGuIX = c(0.866579641,
1.169944183,
1.099720557,
0.958772503,
0.770422062
),
Dotarem = c(0.48632988,
0.863424643,
0.812724906,
0.70351951,
0.558018933
),
Sig1 = c(0.2802, 0.01074, 0.02637, 0.02916, 0.02726)
)
Aorta_data <- data.frame(
Time = factor(time_points, levels = time_points),
AGuIX = c(3.562224594,
1.121731011,
1.049143745,
0.893461014,
0.737940953
),
Dotarem = c(3.651371607,
0.824053479,
0.840478556,
0.709781042,
0.618284264
),
Sig2 = c(0.9875, 0.007302, 0.0387, 0.02073, 0.06486)
)
# Reshape data for plotting and include Sig as part of the long data
IVC_long <- pivot_longer(IVC_data, cols = c(AGuIX, Dotarem), names_to = "Agent", values_to = "Signal") %>%
mutate(Sig = ifelse(Agent == "AGuIX", Sig1, Sig1))  # Adjust this as needed
Aorta_long <- pivot_longer(Aorta_data, cols = c(AGuIX, Dotarem), names_to = "Agent", values_to = "Signal") %>%
mutate(Sig = ifelse(Agent == "AGuIX", Sig2, Sig2))  # Adjust this as needed
# Combine datasets
combined_data <- bind_rows(IVC_long, Aorta_long) %>%
mutate(Location = rep(c("Inferior Vena Cava", "Abdominal Aorta"), each = 10))
# Proceed with plotting as previously described
# Define aesthetic elements for consistency
font_family <- "Helvetica"
font_size_title <- 30
font_size_axis_title <- 30
font_size_text <- 30
font_size_facet <- 30
gg <- ggplot(combined_data, aes(x = Time, y = Signal, fill = Agent)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
scale_fill_manual(values = c("AGuIX" = "lightblue", "Dotarem" = "gold")) +
facet_wrap(~Location, scales = "free_y") +
labs(x = "Time (min)", y = "Mean Blood Attenuation (HU)") +
theme_minimal() +
theme(
text = element_text(family = font_family),
plot.title = element_text(size = font_size_title, face = "bold", hjust = 0.5),
axis.title = element_text(size = font_size_axis_title),
axis.text = element_text(size = font_size_text),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.text = element_text(size = font_size_text),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text = element_text(size = font_size_facet, face = "bold"),
axis.line = element_line(color = "black", size = 1)
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05)), limits = function(x) c(0, max(x) + 1)) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black") +
geom_text(data = filter(combined_data, Sig < 0.05), aes(label = "*", group = Agent), position = position_dodge(width = 0.7), vjust = 0.05, color = "black") +
geom_text(data = filter(combined_data, Sig < 0.01), aes(label = "**", group = Agent), position = position_dodge(width = 0.7), vjust = 0.05, color = "black") +
geom_text(data = filter(combined_data, Sig < 0.001), aes(label = "***", group = Agent), position = position_dodge(width = 0.7), vjust = 0.05, color = "black") +
# Global significance for IVC only
geom_text(data = filter(combined_data, Location == "Inferior Vena Cava"), aes(x = Inf, y = Inf, label = "Global p < 0.0005***"), vjust = 1, hjust = 1.75, color = "red", size = 6)
print(gg)
library(ggplot2)
library(tidyr)
library(dplyr)
# Given your data setup
time_points <- c(0.11, 0.5, 1, 3, 10)
# Add significance values directly into the data frames
IVC_data <- data.frame(
Time = factor(time_points, levels = time_points),
AGuIX = c(0.866579641,
1.169944183,
1.099720557,
0.958772503,
0.770422062
),
Dotarem = c(0.48632988,
0.863424643,
0.812724906,
0.70351951,
0.558018933
),
Sig1 = c(0.2802, 0.01074, 0.02637, 0.02916, 0.02726)
)
Aorta_data <- data.frame(
Time = factor(time_points, levels = time_points),
AGuIX = c(3.562224594,
1.121731011,
1.049143745,
0.893461014,
0.737940953
),
Dotarem = c(3.651371607,
0.824053479,
0.840478556,
0.709781042,
0.618284264
),
Sig2 = c(0.9875, 0.007302, 0.0387, 0.02073, 0.06486)
)
# Reshape data for plotting and include Sig as part of the long data
IVC_long <- pivot_longer(IVC_data, cols = c(AGuIX, Dotarem), names_to = "Agent", values_to = "Signal") %>%
mutate(Sig = ifelse(Agent == "AGuIX", Sig1, Sig1))  # Adjust this as needed
Aorta_long <- pivot_longer(Aorta_data, cols = c(AGuIX, Dotarem), names_to = "Agent", values_to = "Signal") %>%
mutate(Sig = ifelse(Agent == "AGuIX", Sig2, Sig2))  # Adjust this as needed
# Combine datasets
combined_data <- bind_rows(IVC_long, Aorta_long) %>%
mutate(Location = rep(c("Inferior Vena Cava", "Abdominal Aorta"), each = 10))
# Proceed with plotting as previously described
# Define aesthetic elements for consistency
font_family <- "Helvetica"
font_size_title <- 30
font_size_axis_title <- 30
font_size_text <- 30
font_size_facet <- 30
gg <- ggplot(combined_data, aes(x = Time, y = Signal, fill = Agent)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
scale_fill_manual(values = c("AGuIX" = "lightblue", "Dotarem" = "gold")) +
facet_wrap(~Location, scales = "free_y") +
labs(x = "Time (min)", y = "[Gd] (mg/mL)") +
theme_minimal() +
theme(
text = element_text(family = font_family),
plot.title = element_text(size = font_size_title, face = "bold", hjust = 0.5),
axis.title = element_text(size = font_size_axis_title),
axis.text = element_text(size = font_size_text),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank(),
legend.text = element_text(size = font_size_text),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.text = element_text(size = font_size_facet, face = "bold"),
axis.line = element_line(color = "black", size = 1)
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05)), limits = function(x) c(0, max(x) + 1)) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black") +
geom_text(data = filter(combined_data, Sig < 0.05), aes(label = "*", group = Agent), position = position_dodge(width = 0.7), vjust = 0.05, color = "black") +
geom_text(data = filter(combined_data, Sig < 0.01), aes(label = "**", group = Agent), position = position_dodge(width = 0.7), vjust = 0.05, color = "black") +
geom_text(data = filter(combined_data, Sig < 0.001), aes(label = "***", group = Agent), position = position_dodge(width = 0.7), vjust = 0.05, color = "black") +
# Global significance for IVC only
geom_text(data = filter(combined_data, Location == "Inferior Vena Cava"), aes(x = Inf, y = Inf, label = "Global p < 0.0005***"), vjust = 1, hjust = 1.75, color = "red", size = 6)
print(gg)
# Loading renal data and generating descriptive stats
cortex_data <- renalLoad("r_cortex", group = "s")
# Adjusted function to load renal data
renalLoad <- function(tag, path = "Kidney_Measurements/", group = "") {
# Construct the pattern to search for files with the specific tag and group
pattern <- paste0(tag, "_", group, "[0-9]+\\.csv$")
# List all files in the directory
all_files <- list.files(path, pattern = pattern, full.names = TRUE)
# Function to read a file and add NA rows if needed
readAndPad <- function(filePath) {
df <- read_csv(filePath)
neededRows <- 5 - nrow(df)
if (neededRows > 0) {
# Create a tibble of NAs with the same number of columns as df
padRows <- as_tibble(matrix(NA, ncol = ncol(df), nrow = neededRows))
colnames(padRows) <- colnames(df)
# Bind the padRows on top of df
df <- bind_rows(padRows, df)
}
return(df)
}
# Load each file and store in a list
data_list <- lapply(all_files, readAndPad)
return(data_list)
}
# Function to calculate stats remains unchanged
vesselStats <- function(data) {
# Prepare data frames to store the final averages and standard deviations
averages_df <- data.frame(matrix(ncol = ncol(data[[1]]), nrow = nrow(data[[1]])))
colnames(averages_df) <- colnames(data[[1]])
std_dev_df <- data.frame(matrix(ncol = ncol(data[[1]]), nrow = nrow(data[[1]])))
colnames(std_dev_df) <- colnames(data[[1]])
# Iterate over each row
for(row in 1:nrow(data[[1]])) {
sums <- vector("numeric", ncol(data[[1]]))
squared_sums <- vector("numeric", ncol(data[[1]]))
counts <- rep(0, ncol(data[[1]]))
# Loop through each data frame in the list
for(df in data) {
# Check if the row exists in the current data frame
if(nrow(df) >= row) {
# Convert the row to numeric
row_values <- as.numeric(df[row, ])
# Identify non-NA indices
non_na_indices <- !is.na(row_values)
# Perform calculations only on non-NA values
sums[non_na_indices] <- sums[non_na_indices] + row_values[non_na_indices]
squared_sums[non_na_indices] <- squared_sums[non_na_indices] + (row_values[non_na_indices])^2
counts[non_na_indices] <- counts[non_na_indices] + 1
}
}
# Calculate the averages and standard deviations
averages <- sums / counts
variances <- (squared_sums - (sums^2 / counts)) / (counts - 1)
std_devs <- sqrt(variances)
# Handle cases where count is zero to avoid division by zero
averages[is.na(averages)] <- NA  # Set NA where division by zero occurred
std_devs[is.na(std_devs)] <- NA
# Store results in the corresponding data frames
averages_df[row, ] <- averages
std_dev_df[row, ] <- std_devs
}
return(list(averages = averages_df, std_devs = std_dev_df))
}
# Loading renal data and generating descriptive stats
cortex_data <- renalLoad("r_cortex", group = "s")
medulla_data <- renalLoad("r_medulla", group = "s")
pelvis_data <- renalLoad("r_pelvis", group = "s")
cortex_stats <- vesselStats(cortex_data)
medulla_stats <- vesselStats(medulla_data)
pelvis_stats <- vesselStats(pelvis_data)
medulla_stats
pelvis_stats
View(IVC_stats)
View(IVC_stats)
View(SAA_stats)
View(SAA_stats)
SAA_stats$averages$Signal_Kedge
SAA_stats$std_dev$Signal_Kedge
medulla_stats$averages$Signal_Kedge
medulla_stats$std_dev$Signal_Kedge
cortex_stats$averages$Signal_Kedge
cortex_stats$std_dev$Signal_Kedge
IVC_stats$averages$Signal_Kedge
IVC_stats$std_devs$Signal_Kedge
IRA_stats$averages$Signal_Kedge
IRA_stats$std_devs$Signal_Kedge
pelvis_stats$averages$Signal_Kedge
pelvis_stats$std_dev$Signal_Kedge
meanAGuIX <- c(0.866579641,
1.169944183,
1.099720557,
0.958772503,
0.770422062
)
stdAGuIX <- c(0.558441541,
0.155536453,
0.124091693,
0.071656162,
0.097006985
)
meanDotarem <- c(0.48632988,
0.863424643,
0.812724906,
0.70351951,
0.558018933
)
stdDotarem <- c(0.748274375,
0.169046512,
0.134017922,
0.220310831,
0.288175245
)
print(shapiro.test(meanAGuIX - meanDotarem))
print(shapiro.test(stdAGuIX - stdDotarem))
print(t.test(meanAGuIX, meanDotarem, paired = TRUE))
print(t.test(stdAGuIX, stdDotarem, paired = TRUE))
template_df = data.frame("t" = c(0.11, 0.5, 1, 3, 10), "hu" = c(1:5), "hu_std" = c(1:5), "gd" = c(1:5), "gd_std"= c(1:5))
spleen = template_df
spleen$hu = c(154.0504762,
125.5148997,
108.4500961,
88.92600251,
80.52978279
)
spleen$hu_std = c(46.66235895,
17.54330199,
14.82387967,
18.27891114,
9.606424392
)
spleen$gd = c(1.2233714,
0.616890248,
0.454237084,
0.254441528,
0.060972065)
spleen$gd_std = c(0.78218339,
0.237945425,
0.189790326,
0.210977729,
0.070839551
)
liver = template_df
liver$hu = c(75.85445551,
101.4115567,
99.06963241,
93.74984684,
79.63147154
)
liver$hu_std = c(7.664916337,
14.33758501,
13.32598704,
10.84857957,
11.94766289
)
liver$gd = c(0.000952333,
0.419717906,
0.376348649,
0.254458647,
0.050097744
)
liver$gd_std = c(0.002857,
0.22874234,
0.208093603,
0.149619852,
0.062815978
)
# Create lists for averages and standard deviations for spleen and liver
spleen_stats <- list(
averages = data.frame(
t = spleen$t,
Signal_HU = spleen$hu,
Signal_Kedge = spleen$gd
),
std_devs = data.frame(
t = spleen$t,
Signal_HU = spleen$hu_std,
Signal_Kedge = spleen$gd_std
)
)
liver_stats <- list(
averages = data.frame(
t = liver$t,
Signal_HU = liver$hu,
Signal_Kedge = liver$gd
),
std_devs = data.frame(
t = liver$t,
Signal_HU = liver$hu_std,
Signal_Kedge = liver$gd_std
)
)
spleen_stats_adjusted <- list(
averages = data.frame(
t = spleen_stats$averages$t,
Signal_HU = spleen_stats$averages$Signal_HU,
Signal_Kedge = spleen_stats$averages$Signal_Kedge,
Noise_HU = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(spleen_stats$averages))  # Placeholder if needed
),
std_devs = data.frame(
t = spleen_stats$std_devs$t,
Signal_HU = spleen_stats$std_devs$Signal_HU,
Signal_Kedge = spleen_stats$std_devs$Signal_Kedge,
Noise_HU = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(spleen_stats$std_devs))  # Placeholder if needed
)
)
liver_stats_adjusted <- list(
averages = data.frame(
t = liver_stats$averages$t,
Signal_HU = liver_stats$averages$Signal_HU,
Signal_Kedge = liver_stats$averages$Signal_Kedge,
Noise_HU = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(liver_stats$averages))  # Placeholder if needed
),
std_devs = data.frame(
t = liver_stats$std_devs$t,
Signal_HU = liver_stats$std_devs$Signal_HU,
Signal_Kedge = liver_stats$std_devs$Signal_Kedge,
Noise_HU = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(liver_stats$std_devs))  # Placeholder if needed
)
)
library(ggplot2)
library(ggplot2)
plotOrganDataBars <- function(data_list, title, ylab, y_breaks, type) {
# Prepare the time points; ensure these match your actual time points
time_points <- c(0.11, 0.5, 1, 3, 10)
# Create the plot data by combining all organ data frames and adding an 'Organ' column
plot_data <- do.call(rbind, lapply(names(data_list), function(org) {
df <- data_list[[org]]
df$Organ <- org
transform(df, TimePoint = factor(t, levels = as.character(time_points)))
}))
# Determine the columns to plot based on 'type'
signal <- ifelse(type == "Gd", "gd", "hu")
std <- ifelse(type == "Gd", "gd_std", "hu_std")
# Create the plot
gg <- ggplot(plot_data, aes_string(x = "TimePoint", y = signal, fill = "Organ")) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes_string(ymin = paste(signal, "-", std), ymax = paste(signal, "+", std)),
width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Spleen" = "hotpink", "Liver" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(limits = c(0, 9.5), expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", linewidth = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
)
# Print the plot
print(gg)
}
# Example usage
plotOrganDataBars(
data_list = list(Pancreas = pancreas, Spleen = spleen, Liver = liver),
title = "Gd K-edge Organ Enhancement",
ylab = "[Gd] (mg/mL)",
y_breaks = seq(0, 2, by = 0.3),  # Adjust y_breaks according to the actual range of your data
type = "Gd"
)
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Liver" = "gold", "Spleen" = "hotpink", "Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(limits = c(0, 9.5), expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color = "black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black")  # Vertical dotted lines
library(ggplot2)
library(reshape2) # For melting the data into long format
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10)  # Adjust if your time points are different
renal_areas <- c("Liver", "Spleen", "Cortex", "Medulla", "Pelvis")  # Specified order here
# Prepare data for plotting
plot_data <- data.frame(
TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points))
)
# Set RenalArea as a factor with the specified order
plot_data$RenalArea <- factor(plot_data$RenalArea, levels = renal_areas)
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Liver" = "gold", "Spleen" = "hotpink", "Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(limits = c(0, 9.5), expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color = "black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black")  # Vertical dotted lines
# Print the plot
print(gg)
}
# Ensure your stats_list is correct and includes the ordered data
stats_list <- list(liver_stats_adjusted, spleen_stats_adjusted, cortex_stats, medulla_stats, pelvis_stats)
plotRenalDataBars(stats_list, "Gd K-edge Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))
