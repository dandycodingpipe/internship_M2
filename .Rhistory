t = spleen_stats$averages$t,
Signal_HU = spleen_stats$averages$Signal_HU,
Signal_Kedge = spleen_stats$averages$Signal_Kedge,
Noise_HU = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(spleen_stats$averages)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(spleen_stats$averages))  # Placeholder if needed
),
std_devs = data.frame(
t = spleen_stats$std_devs$t,
Signal_HU = spleen_stats$std_devs$Signal_HU,
Signal_Kedge = spleen_stats$std_devs$Signal_Kedge,
Noise_HU = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(spleen_stats$std_devs)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(spleen_stats$std_devs))  # Placeholder if needed
)
)
liver_stats_adjusted <- list(
averages = data.frame(
t = liver_stats$averages$t,
Signal_HU = liver_stats$averages$Signal_HU,
Signal_Kedge = liver_stats$averages$Signal_Kedge,
Noise_HU = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(liver_stats$averages)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(liver_stats$averages))  # Placeholder if needed
),
std_devs = data.frame(
t = liver_stats$std_devs$t,
Signal_HU = liver_stats$std_devs$Signal_HU,
Signal_Kedge = liver_stats$std_devs$Signal_Kedge,
Noise_HU = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
Noise_Kedge = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
CNR_HU = rep(NA, nrow(liver_stats$std_devs)),  # Placeholder if needed
CNR_Kedge = rep(NA, nrow(liver_stats$std_devs))  # Placeholder if needed
)
)
library(ggplot2)
library(ggplot2)
plotOrganDataBars <- function(data_list, title, ylab, y_breaks, type) {
# Prepare the time points; ensure these match your actual time points
time_points <- c(0.11, 0.5, 1, 3, 10)
# Create the plot data by combining all organ data frames and adding an 'Organ' column
plot_data <- do.call(rbind, lapply(names(data_list), function(org) {
df <- data_list[[org]]
df$Organ <- org
transform(df, TimePoint = factor(t, levels = as.character(time_points)))
}))
# Determine the columns to plot based on 'type'
signal <- ifelse(type == "Gd", "gd", "hu")
std <- ifelse(type == "Gd", "gd_std", "hu_std")
# Create the plot
gg <- ggplot(plot_data, aes_string(x = "TimePoint", y = signal, fill = "Organ")) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes_string(ymin = paste(signal, "-", std), ymax = paste(signal, "+", std)),
width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Spleen" = "hotpink", "Liver" = "gold")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(limits = c(0, 9.5), expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color="black", linewidth = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
)
# Print the plot
print(gg)
}
# Example usage
plotOrganDataBars(
data_list = list(Pancreas = pancreas, Spleen = spleen, Liver = liver),
title = "Gd K-edge Organ Enhancement",
ylab = "[Gd] (mg/mL)",
y_breaks = seq(0, 2, by = 0.3),  # Adjust y_breaks according to the actual range of your data
type = "Gd"
)
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10)  # Adjust if your time points are different
renal_areas <- c("Liver", "Spleen", "Cortex", "Medulla", "Pelvis")  # Specified order here
#renal_areas <- c("Cortex", "Medulla", "Pelvis")
# Prepare data for plotting
plot_data <- data.frame(
TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) log10(x$averages[[data]]))),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points))
)
# Set RenalArea as a factor with the specified order
plot_data$RenalArea <- factor(plot_data$RenalArea, levels = renal_areas)
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Liver" = "gold", "Spleen" = "hotpink", "Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(limits = c(0, 9.5), expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color = "black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black")  # Vertical dotted lines
# Print the plot
print(gg)
ggsave("CNR_organs_Kedge_plot.png", plot = gg, width = 2500, height = 2500, units = "px")
}
plotRenalDataBars(stats_list, "Gd K-edge Organ Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))
# Ensure your stats_list is correct and includes the ordered data
#stats_list <- list(liver_stats_adjusted, spleen_stats_adjusted, cortex_stats, medulla_stats, pelvis_stats)
stats_list <- list(spleen_stats, liver_stats, cortex_stats, medulla_stats, pelvis_stats)
plotRenalDataBars(stats_list, "Gd K-edge Organ Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10)  # Adjust if your time points are different
renal_areas <- c("Liver", "Spleen", "Cortex", "Medulla", "Pelvis")  # Specified order here
#renal_areas <- c("Cortex", "Medulla", "Pelvis")
# Prepare data for plotting
plot_data <- data.frame(
TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) log10(x$averages[[data]]))),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points))
)
# Set RenalArea as a factor with the specified order
plot_data$RenalArea <- factor(plot_data$RenalArea, levels = renal_areas)
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Liver" = "gold", "Spleen" = "hotpink", "Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(limits = c(0, 9.5), expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color = "black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black")  # Vertical dotted lines
# Print the plot
print(gg)
ggsave("CNR_organs_Kedge_plot.png", plot = gg, width = 2500, height = 2500, units = "px")
}
# Ensure your stats_list is correct and includes the ordered data
#stats_list <- list(liver_stats_adjusted, spleen_stats_adjusted, cortex_stats, medulla_stats, pelvis_stats)
stats_list <- list(spleen_stats, liver_stats, cortex_stats, medulla_stats, pelvis_stats)
plotRenalDataBars(stats_list, "Gd K-edge Organ Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))
# Ensure your stats_list is correct and includes the ordered data
#stats_list <- list(liver_stats_adjusted, spleen_stats_adjusted, cortex_stats, medulla_stats, pelvis_stats)
stats_list <- list(liver_stats, spleen_stats, cortex_stats, medulla_stats, pelvis_stats)
plotRenalDataBars(stats_list, "Gd K-edge Organ Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))
plotRenalDataBars <- function(stats_list, title, data, ylab, y_breaks) {
# Assuming Time Points are consistent across datasets
time_points <- c(0.11, 0.5, 1, 3, 10)  # Adjust if your time points are different
renal_areas <- c("Liver", "Spleen", "Cortex", "Medulla", "Pelvis")  # Specified order here
#renal_areas <- c("Cortex", "Medulla", "Pelvis")
# Prepare data for plotting
plot_data <- data.frame(
TimePoint = rep(time_points, times = length(renal_areas)),
Signal = unlist(lapply(stats_list, function(x) x$averages[[data]])),
SD = unlist(lapply(stats_list, function(x) x$std_devs[[data]])),
RenalArea = rep(renal_areas, each = length(time_points))
)
# Set RenalArea as a factor with the specified order
plot_data$RenalArea <- factor(plot_data$RenalArea, levels = renal_areas)
# Convert TimePoint to a factor to have discrete bars
plot_data$TimePoint <- factor(plot_data$TimePoint, levels = as.character(time_points))
gg <- ggplot(plot_data, aes(x = TimePoint, y = Signal, fill = RenalArea)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
geom_errorbar(aes(ymin = Signal - SD, ymax = Signal + SD), width = 0.2, position = position_dodge(width = 0.7)) +
scale_fill_manual(values = c("Liver" = "gold", "Spleen" = "hotpink", "Cortex" = "purple", "Medulla" = "orange", "Pelvis" = "lightgreen")) +
labs(title = title, x = "Time (min)", y = ylab) +
scale_y_continuous(limits = c(0, 9.5), expand = expansion(mult = c(0.003, 0.006)), breaks = y_breaks) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5, size = 30),
legend.title = element_blank(),
axis.line = element_line(color = "black", size = 1),
axis.line.x = element_line(color = "black", size = 1),
axis.line.y = element_line(color = "black", size = 1),
axis.ticks = element_line(color = "black"),
axis.title = element_text(size = 30),
panel.border = element_blank(),
axis.title.y = element_text(size = 30, margin = margin(r = 20)),
axis.title.x = element_text(size = 30, margin = margin(t = 20)),
panel.background = element_rect(fill = "white"),
axis.text.x = element_text(size = 30),
axis.text = element_text(size = 30, margin = margin(r = 20), face = "bold")
) +
geom_vline(xintercept = c(2.5, 4.5), linetype = "dotted", color = "black")  # Vertical dotted lines
# Print the plot
print(gg)
ggsave("CNR_organs_Kedge_plot.png", plot = gg, width = 2500, height = 2500, units = "px")
}
plotRenalDataBars(stats_list, "Gd K-edge Organ Biodistribution", "Signal_Kedge", "[Gd] (mg/mL)", y_breaks = c(1:10))
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 4, ncol = 2,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 5, ncol = 2,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
legend <- gtable::gtable_filter(g, "guide-box")
# Draw the legend
grid.newpage()
grid.draw(legend)
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 4, ncol = 3,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
legend <- gtable::gtable_filter(g, "guide-box")
# Draw the legend
grid.newpage()
grid.draw(legend)
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 5, ncol = 2,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
legend <- gtable::gtable_filter(g, "guide-box")
# Draw the legend
grid.newpage()
grid.draw(legend)
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 10, ncol = 1,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
legend <- gtable::gtable_filter(g, "guide-box")
# Draw the legend
grid.newpage()
grid.draw(legend)
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 1, ncol = 10,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
legend <- gtable::gtable_filter(g, "guide-box")
# Draw the legend
grid.newpage()
grid.draw(legend)
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 2, ncol = 5,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
legend <- gtable::gtable_filter(g, "guide-box")
# Draw the legend
grid.newpage()
grid.draw(legend)
library(ggplot2)
library(grid)
# Define categories and their corresponding unique colors
categories <- c("Suprarenal abdominal aorta", "Infrarenal aorta", "Inferior vena cava", "Infrarenal vena cava" ,"Cortex","Medulla", "Pelvis", "Liver" ,"Spleen")
#categories <- c("Cortex", "Medulla", "Pelvis")
colors <- c("Suprarenal abdominal aorta" = "red",
"Infrarenal aorta" = "pink",
"Inferior vena cava" = "blue",
"Infrarenal vena cava" = "lightblue",
"Cortex" = "purple",
"Medulla" = "orange",
"Pelvis" = "lightgreen",
"Liver" = "gold",
"Spleen"=  "hotpink")
# Create a dummy dataframe
data <- data.frame(Category = factor(categories, levels = categories))
# Create the plot with proper color mappings
gg <- ggplot(data, aes(x = 1, y = Category, fill = Category)) +
geom_tile() +  # using geom_tile to create colored boxes
scale_fill_manual(values = colors) +
theme_void() +
theme(legend.position = "bottom",
legend.text = element_text(size = 12, face = "bold"),  # Bold legend text
legend.box.spacing = unit(2, "lines"),  # Increase spacing between legend items
legend.spacing.x = unit(1, "cm"),  # Increase spacing between legend columns
legend.spacing.y = unit(1, "cm")) +  # Increase spacing between legend rows
guides(fill = guide_legend(title = "",
nrow = 10, ncol = 1,  # Specify the layout of the legend items
byrow = TRUE))  # Fill by rows first
# Extract the legend
g <- ggplotGrob(gg)
legend <- gtable::gtable_filter(g, "guide-box")
# Draw the legend
grid.newpage()
grid.draw(legend)
