rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
import(rstudioapi)
addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
import(rstudioapi)
devtools::install_github("rstudio/rstudioapi")
clear
clear all()
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages(rstudioapi)
install.packages(
"rsthemes",
repos = c(gadenbuie = 'https://gadenbuie.r-universe.dev', getOption("repos"))
)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
py_module_available('spacy')
library(reticulate)
py_module_available('spacy')
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
py_install('spacy')
py_module_available('spacy')
py_module_available('spacy')
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
py_module_available('spacy')
#install_miniconda()
use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311/python.exe')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311/python.exe')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311)
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python('C:/Users/Chris/AppData/Local/Programs/Python/Python311')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install.packages('reticulate')
library(reticulate)
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_install('spacy')
py_module_available('spacy')
py_available()
py_module_available('spacy')
py_install('spacy', envname = "C:/Users/Chris/AppData/Local/Programs/Python/Python311")
#install.packages('reticulate')
library(reticulate)
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_available()
py_module_available('spacy')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_condaenv("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_miniconda("C:/Users/Chris/AppData/Local/r-miniconda")
py_config()
py_install('spacy', envname = "C:/Users/Chris/AppData/Local/Programs/Python/Python311")
conda_create("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_install('spacy', envname = "C:/Users/Chris/AppData/Local/Programs/Python/Python311")
py_available()
py_config()
py_module_available('spacy')
#install_miniconda()
#use_miniconda("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
use_python("C:/Users/Chris/AppData/Local/Programs/Python/Python311")
remove.packages(reticulate)
remove.packages('reticulate')
install.packages('reticulate)
install.packages('reticulate')
install.packages("reticulate")
library(reticulate)
library(reticulate)
install("rstudioapi")
install.packages('rstudioapi')
library(rstudioapi)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages('easyPubMed')
install.packages('spacyr')
install.packages('rstudioapi')
install.packages(easyPubMed)
install.packages('easyPubMed')
install.packages('spacyr')
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
install.packages('reticulate')
source("easyKAF.R")
library("devtools")
install_github('KAFtool','dandycodingpipe')
install_github('https://github.com/dandycodingpipe/KAFtool','dandycodingpipe')
devtools::install_github('https://github.com/dandycodingpipe/KAFtool')
devtools::install_github('dandycodingpipe/KAFtool')
devtools::install_github('dandycodingpipe/KAFtool')
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
library(KAFtool)
uninstall(KAFtool)
uninstall("KAFtool")
uninstall.packages("KAFtool")
remove.packages("KAFtool")
remove.packages("Cats")
remove.packages("cats")
remove.packages("Cats")
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
remove.packages("KAFtool")
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
remove.packages("KAFtool")
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
library(KAFtool)
remove.packages("KAFtool")
library(KAFtool)
devtools::install_github('dandycodingpipe/KAFtool')
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
library(KAFtool)
rules <- easyKAF(venv = "C:/Users/JohnDoe/venv/June13", lang_model = "en_core_web_sm")
library(KAFtool)
rules <- easyKAF(venv = "C:/Users/JohnDoe/venv/June13", lang_model = "en_core_web_sm")
rules <- easyKAF(venv = "C:/Users/JohnDoe/venv/June13", lang_model = "en_core_web_sm")
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
rules <- easyKAF(venv = "C:/Users/Chris/venv/June13", lang_model = "en_core_web_sm")
clean_rules <- MeSH_finalizer(rules, c("-"))
clean_rules <- MeSH_finalizer(rules, c("-","±"))
library(KAFtool)
devtools::install_github('dandycodingpipe/KAFtool')
library(KAFtool)
rules <- easyKAF(venv = "C:/Users/Chris/venv/June13", lang_model = "en_core_web_sm")
20,000*100
20000*100
clean_rules <- MeSH_finalizer(rules, removal = c("-","±"))
viz <- ruleViewer(clean_rules, "bar", "bme")
viz
viz <- ruleViewer(clean_rules, "df", "bme")
View(viz)
viz <- ruleViewer(clean_rules, "df", "other")
View(viz)
devtools::install_github('dandycodingpipe/KAFtool')
devtools::install_github('dandycodingpipe/KAFtool')
library(devtools)
devtools::install_github('dandycodingpipe/KAFtool')
library(httr)
library(jsonlite)
library(dplyr)
#Bills info
test_retrieval <- GET(https://api.congress.gov/v3/bill?api_key=[INSERT_KEY])
#Bills info
test_retrieval <- GET(https://api.congress.gov/v3/bill?api_key=[7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c])
#Bills info
test_retrieval <- GET(https:\api.congress.gov\v3\bill?api_key=[7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c])
#Bills info
test_retrieval <- GET("https:\api.congress.gov\v3\bill?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
#Bills info
test_retrieval <- GET("https:/api.congress.gov/v3/bill?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
View(test_retrieval)
converter <-fromJSON(rawToChar(test_retrieval$content))
View(converter)
converter$bills
converter$bills$title
converter$bills$number
coordinates <- converter$bills$number
#Bill coordinates
hold_i_guess <- vector("list", length(coordinates))
for(i in 1:length(coordinates)){
}
View(hold_i_guess)
bill <- GET("https://api.congress.gov/v3/bill/117/hr/3756?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(test_retrieval$content))
View(converter)
bill <- GET("https://api.congress.gov/v3/bill/117/hr/3756?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(bill$content))
View(converter)
converter$bill
bill <- GET("https://api.congress.gov/v3/bill/117/hr/3756/text?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(bill$content))
converter$textVersions
converter$textVersions$type
converter$pagination
converter$request
converter$textVersions
View(converter)
full_text <- GET("https://www.congress.gov/117/bills/hr3756/BILLS-117hr3756ih.xml")
#Bill coordinates
hold_i_guess <- vector("list", length(coordinates))
View(test_retrieval)
View(full_text)
full_text$content
converter <-fromJSON(rawToChar(full_text$content))
View(converter)
full_text <- GET("https://www.congress.gov/117/bills/hr3756/BILLS-117hr3756ih.xml")
converter <-fromJSON(rawToChar(full_text$content))
full_text$content
View(full_text)
full_text[["content"]]
converter <-rawToChar(full_text$content)
converter
bill <- GET("https://api.congress.gov/v3/bill/117/hr/3756/text?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(bill$content))
converter$textVersions
#Bills Coordinates
test_retrieval <- GET("https:/api.congress.gov/v3/bill?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(test_retrieval$content))
converter$bills
bill <- GET("https://api.congress.gov/v3/bill/117/hr/3756/text?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(bill$content))
full_text <- GET("https://www.congress.gov/117/bills/hr3756/BILLS-117hr3756ih.xml")
converter <-rawToChar(full_text$content)
full_text$content
bill <- GET("https://api.congress.gov/v3/bill/117/hr/3756/text?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(bill$content))
converter$textVersions
full_text <- GET("https://www.congress.gov/117/bills/hr3756/BILLS-117hr3756ih.htm")
full_text
full_text$content
converter <-rawToChar(full_text$content)
full_text <- GET("https://www.congress.gov/117/bills/hr3756/BILLS-117hr3756ih.xml")
converter <-rawToChar(full_text$content)
converter
#Bills Coordinates
test_retrieval <- GET("https:/api.congress.gov/v3/bill?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
test_retrieval
View(test_retrieval)
test_retrieval$content
converter <-fromJSON(rawToChar(test_retrieval$content))
converter$bills
converter$bills$title
converter$bills$number
coordinates <- converter$bills$number
bill <- GET("https://api.congress.gov/v3/bill/117/hr/3756/text?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
converter <-fromJSON(rawToChar(bill$content))
converter$textVersions
full_text <- GET("https://www.congress.gov/117/bills/hr3756/BILLS-117hr3756ih.pdf")
converter <-rawToChar(full_text$content)
full_text$content
full_text$content
converter <-rawToChar(full_text$content)
full_text <- GET("https://www.congress.gov/117/bills/hr3756/BILLS-117hr3756ih.xml")
full_text$content
converter <-rawToChar(full_text$content)
converter
library(XML)
doc <- xmlRoot(xmlTreeParse(converter))
class_frequencies <- table(names(doc))
View(doc)
doc$`legis-body`
doc$metadata
doc
summaries <- GET("https://api.congress.gov/v3/bill/117/hr/3756/summaries?api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
summaries$content
converter <-fromJSON(rawToChar(summaries$content))
converter$summaries
summaries <- GET("http://gpo.congress.gov/v3/bill/117/hr/3756/summaries?format=json&api_key=7gDkptUnPjvgWJ6ZzLT4B6NQFrkOwLa7VccGsj6c")
summaries$content
converter <-fromJSON(rawToChar(summaries$content))
summaries
converter <-rawToChar(summaries$content)
converter
devtools::install_github('dandycodingpipe/KAFtool')
# Load necessary library
library(ggplot2)
# Prepare the data
data <- data.frame(
Variable = c('Spindles Power', 'Alpha Power', 'MoCA D-1', 'MoCA D+2', 'Propofol Dosage'),
Median_MoCA_25_or_More = c(40, 150, 27, 26, 3.5),
Median_MoCA_Less_Than_25 = c(25, 85, 23, 21, 3)
)
# Reshape data for plotting
data_long <- reshape2::melt(data, id.vars = 'Variable', variable.name = 'Group', value.name = 'Median')
# Plot
ggplot(data_long, aes(x = Variable, y = Median, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge') +
theme_minimal() +
labs(title = 'Median Values of Statistically Significant Observations',
x = 'Variable',
y = 'Median Value') +
scale_fill_manual(values = c('Median_MoCA_25_or_More' = 'blue', 'Median_MoCA_Less_Than_25' = 'red'),
labels = c('MoCA ≥25', 'MoCA <25')) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary library
library(ggplot2)
# Prepare the data
data <- data.frame(
Variable = c('Spindles Power', 'Alpha Power', 'MoCA D-1', 'MoCA D+2', 'Propofol Dosage'),
Median_MoCA_25_or_More = c(40, 150, 27, 26, 3.5),
Median_MoCA_Less_Than_25 = c(25, 85, 23, 21, 3),
Units = c('Units', 'μV^2/Hz', 'Points', 'Points', 'μg/mL')
)
# Reshape data for plotting
data_long <- reshape2::melt(data, id.vars = c('Variable', 'Units'), variable.name = 'Group', value.name = 'Median')
# Define custom colors
custom_colors <- c('Median_MoCA_25_or_More' = '#377eb8', 'Median_MoCA_Less_Than_25' = '#e41a1c')  # Adjust colors as needed
# Plot
ggplot(data_long, aes(x = Variable, y = Median, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = paste(Median, Units, sep=" ")), position = position_dodge(width = 0.9), vjust = -0.25) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = 'Median Values of Statistically Significant Observations',
x = 'Variable',
y = 'Median Value') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary library
library(ggplot2)
# Prepare the data
data <- data.frame(
Variable = c('Spindles Power\n(Units)', 'Alpha Power\n(μV^2/Hz)', 'MoCA D-1\n(Points)', 'MoCA D+2\n(Points)', 'Propofol Dosage\n(μg/mL)'),
Median_MoCA_25_or_More = c(40, 150, 27, 26, 3.5),
Median_MoCA_Less_Than_25 = c(25, 85, 23, 21, 3)
)
# Reshape data for plotting
data_long <- reshape2::melt(data, id.vars = 'Variable', variable.name = 'Group', value.name = 'Median')
# Define custom colors
custom_colors <- c('Median_MoCA_25_or_More' = '#377eb8', 'Median_MoCA_Less_Than_25' = '#e41a1c')  # Adjust colors as needed
# Plot
ggplot(data_long, aes(x = Variable, y = Median, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = Median), position = position_dodge(width = 0.9), vjust = -0.25) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = 'Median Values of Statistically Significant Observations',
x = '',  # Remove x-axis label
y = 'Median Value') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary library
library(ggplot2)
# Prepare the data
data <- data.frame(
Variable = c('Spindles Power\n(Units)', 'Alpha Power\n(μV^2/Hz)', 'MoCA D-1\n(Points)', 'MoCA D+2\n(Points)', 'Propofol Dosage\n(μg/mL)'),
Median_MoCA_25_or_More = c(40, 150, 27, 26, 3.5),
Median_MoCA_Less_Than_25 = c(25, 85, 23, 21, 3)
)
# Reshape data for plotting
data_long <- reshape2::melt(data, id.vars = 'Variable', variable.name = 'Group', value.name = 'Median')
# Define custom colors
custom_colors <- c('Median_MoCA_25_or_More' = '#377eb8', 'Median_MoCA_Less_Than_25' = '#e41a1c')  # Adjust colors as needed
# Plot
ggplot(data_long, aes(x = Variable, y = Median, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = Median), position = position_dodge(width = 0.9), vjust = -0.25) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = 'Median Values of Statistically Significant Observations',
x = '',  # Remove x-axis label
y = 'Median Value') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary library
library(ggplot2)
# Prepare the data
data <- data.frame(
Variable = c('Spindles Power\n(Units)', 'Alpha Power\n(μV^2/Hz)', 'MoCA D-1\n(Points)', 'MoCA D+2\n(Points)', 'Propofol Dosage\n(μg/mL)'),
Median_MoCA_25_or_More = c(40, 150, 27, 26, 3.5),
Median_MoCA_Less_Than_25 = c(25, 85, 23, 21, 3)
)
# Reshape data for plotting
data_long <- reshape2::melt(data, id.vars = 'Variable', variable.name = 'Group', value.name = 'Median')
# Define custom colors
custom_colors <- c('Median_MoCA_25_or_More' = '#377eb8', 'Median_MoCA_Less_Than_25' = '#e41a1c')  # Adjust colors as needed
# Plot
ggplot(data_long, aes(x = Variable, y = Median, fill = Group)) +
geom_bar(stat = 'identity', position = 'dodge') +
geom_text(aes(label = Median), position = position_dodge(width = 0.9), vjust = -0.25) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = 'Median Values of Statistically Significant Observations',
x = '',  # Remove x-axis label
y = 'Median Value') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(bioTM)
library(tidyverse)
# association finding strategy
#"cytoglobin AND 2010/01/01:2022/12/01[dp]"
concepts <- PubTator('"myocardial infarction AND myocardial ischemia" AND 2010/01/01:2022/12/25[dp]')
install_github("https://github.com/dandycodingpipe/pubAssociationFinder")
#install/load package
library(devtools)
install_github("https://github.com/dandycodingpipe/pubAssociationFinder")
library(bioTM)
library(tidyverse)
keywords <- easyKAF("myocardial infarction AND myocardial ischemia","pubmed", "/Users/Notebook/OneDrive/2023/Systox/venvJune19", "en_core_web_lg")
keywords <- easyKAF("myocardial infarction AND myocardial ischemia","pubmed", "C:/Users/Chris/OneDrive/2023/Systox/venvJune19", "en_core_web_lg")
library(tidycensus)
install_packages("tidycensus")
install.packages("tidycensus")
library(tidycensus)
library(tidyverse)
library(tigris)
options(tigris_use_cache = TRUE)
us_components <- get_estimates(geography = "state", product = "components", vintage = 2023)
us_components
View(us_components)
get_estimates()
unique(us_components$variable)
net_migration <- get_estimates(geography = "county",
variables = "DEATHS",
vintage = 2023,
geometry = TRUE,
resolution = "20m") %>%
shift_geometry()
net_migration <- get_estimates(geography = "county",
variables = "NETMIG",
vintage = 2023,
geometry = TRUE,
resolution = "20m") %>%
shift_geometry()
net_migration <- get_estimates(geography = "county",
variables = "NETMIG",
vintage = 2023,
geometry = TRUE,
resolution = "20m") %>%
shift_geometry()
net_migration <- get_estimates(geography = "county",
variables = "NETMIG",
vintage = 2022,
geometry = TRUE,
resolution = "20m") %>%
shift_geometry()
net_migration <- get_estimates(geography = "county",
variables = "NETMIG",
vintage = 2023,
geometry = TRUE,
resolution = "20m") %>%
shift_geometry()
net_migration <- get_estimates(geography = "state",
variables = "NETMIG",
vintage = 2023,
geometry = TRUE,
resolution = "20m") %>%
shift_geometry()
net_migration <- get_estimates(geography = "state",
variables = "NETMIG",
vintage = 2023,
geometry = TRUE) %>%
shift_geometry()
us_components <- get_estimates(geography = "state", variables = "NETMIG", vintage = 2023)
us_components
us_components %>% shift_geometry()
library(showtext)
install.packages("showtext")
library(showtext)
font_add_google("Roboto")
showtext_auto()
order = c("-15 and below", "-15 to -5", "-5 to +5", "+5 to +15", "+15 and up")
net_migration <- net_migration %>%
mutate(groups = case_when(
value > 15 ~ "+15 and up",
value > 5 ~ "+5 to +15",
value > -5 ~ "-5 to +5",
value > -15 ~ "-15 to -5",
TRUE ~ "-15 and below"
)) %>%
mutate(groups = factor(groups, levels = order))
net_migration <- us_components
us_components$value
mean(us_components$value)
library(showtext)
font_add_google("Roboto")
showtext_auto()
order = c("+10k and up", "+0 to +10k", "-1k to 0", "-1k to -10k and up", "15 and below")
net_migration <- net_migration %>%
mutate(groups = case_when(
value > 10000 ~ "+10k and up",
value > 0 ~ "+0 to +10k",
value > -1000 ~ "-1k to 0",
value > -10000 ~ "-1k to -10k and up",
TRUE ~ "-15 and below"
)) %>%
mutate(groups = factor(groups, levels = order))
state_overlay <- states(
cb = TRUE,
resolution = "20m"
) %>%
filter(GEOID != "72") %>%
shift_geometry()
ggplot() +
geom_sf(data = net_migration, aes(fill = groups, color = groups), size = 0.1) +
geom_sf(data = state_overlay, fill = NA, color = "black", size = 0.1) +
scale_fill_brewer(palette = "PuOr", direction = -1) +
scale_color_brewer(palette = "PuOr", direction = -1, guide = FALSE) +
coord_sf(datum = NA) +
theme_minimal(base_family = "Roboto", base_size = 18) +
labs(title = "Net migration per 1000 residents by county",
subtitle = "US Census Bureau 2023 Population Estimates",
fill = "Rate",
caption = "Data acquired with the R tidycensus package | @kyle_e_walker")
us_components <- get_estimates(geography = "state", variables = "NETMIG", vintage = 2023, geometry =TRUE)
setwd("C:/Users/Chris/OneDrive/2023/BME_M2/STAGE/Thesis/Scripts_and_venv/internship_M2")
setwd("C:/Users/Chris/OneDrive/2023/BME_M2/STAGE/Thesis/Scripts_and_venv/internship_M2")
